// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Animator
@_exported import Animator
import Foundation
import Swift
import UIKit
@objc @_inheritsConvenienceInitializers public class Animator : ObjectiveC.NSObject {
  public var animationOptions: UIKit.UIView.KeyframeAnimationOptions
  @objc override dynamic public init()
  public init(direction: Animator.VBDirection)
  @objc deinit
}
extension Animator : UIKit.UIViewControllerTransitioningDelegate {
  @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
}
public enum VBDirection {
  case topTobottom
  case topTotop
  case bottomTotop
  case bottomTobottom
  public static func == (a: Animator.VBDirection, b: Animator.VBDirection) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public protocol VBProtocol {
  @objc optional var animatedViews: [UIKit.UIView] { get }
}
extension Animator.VBDirection : Swift.Equatable {}
extension Animator.VBDirection : Swift.Hashable {}
